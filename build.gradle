import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'base'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.1.5'
    id 'de.undercouch.download' version '5.6.0'
    id 'distribution'
}

group = 'com.enonic.xp'

repositories {
    mavenLocal()
    maven {
        url 'https://repo.enonic.com/dev'
    }
}

apply from: 'jdk.gradle'

configurations {
    app
    distro
}

dependencies {
    app "com.enonic.xp:app-main:${version}@jar"
    app "com.enonic.xp:app-standardidprovider:${version}@jar"
    app "com.enonic.xp:app-applications:${version}@jar"
    app "com.enonic.xp:app-users:${version}@jar"
    if ( isSdkBuild() )
    {
        app "com.enonic.xp:app-sdk:${version}@jar"
    }
    distro( "com.enonic.xp:runtime:${version}@zip" )
}

ext {
    installDir = "$buildDir/install"
    targetBaseName = getTargetBaseName()
    appLevel = 40
    downloadJdkDir = "$buildDir/jdk"
    jdkPackageFile = getJdkPackageFile()
    jdkPackageName = getJdkPackageName()
    unpackedJdkDir = "$downloadJdkDir/$jdkPackageName"
    archiveJavaHomeDir = "$unpackedJdkDir/${getArchiveJavaHome()}"
    jlinkDir = "$buildDir/jlink/$jdkPackageName/${getTargetTypeName()}"
}

task downloadJdk( type: Download ) {
    description = 'Download JDK.'
    group = 'Dist'

    onlyIf {
        withJava()
    }

    overwrite false
    onlyIfModified true

    if ( withJava() )
    {
        src getJdkDownloadUrl()
        dest file( "$downloadJdkDir/$jdkPackageFile" )
        doFirst {
            mkdir downloadJdkDir
        }
    }
}

task unpackJdk( type: Copy, dependsOn: downloadJdk ) {
    description = 'Unpack JDK.'
    group = 'Dist'

    onlyIf {
        withJava()
    }

    if ( withJava() )
    {
        def fileTree
        if ( jdkPackageFile.endsWith( '.zip' ) )
        {
            fileTree = zipTree( file( "$downloadJdkDir/$jdkPackageFile" ) )
        }
        else if ( jdkPackageFile.endsWith( '.tar.gz' ) )
        {
            fileTree = tarTree( resources.gzip( file( "$downloadJdkDir/$jdkPackageFile" ) ) )
        }
        else
        {
            throw new GradleException( "Unable to unpack JDK: $jdkPackageFile" )
        }

        from( fileTree ) {
            eachFile { fcd -> fcd.relativePath = new RelativePath( true, fcd.relativePath.segments.drop( 1 ) )
            }
            includeEmptyDirs = false
            duplicatesStrategy = DuplicatesStrategy.WARN
        }

        into unpackedJdkDir
    }
}

task jlink( type: Exec, dependsOn: unpackJdk ) {
    onlyIf {
        withJava()
    }
    doFirst {
        def jmodsDir = "$archiveJavaHomeDir/jmods"

        delete jlinkDir

        def args = ['jlink', '--compress=2', '--no-header-files', '--no-man-pages',
                    '--add-modules', 'ALL-MODULE-PATH',
                    '--module-path', "$jmodsDir",
                    '--output', "$jlinkDir"]

        args.add( '--add-options=-XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCIProduct -XX:-UnlockExperimentalVMOptions' )

        commandLine args
    }

    inputs.dir unpackedJdkDir
    outputs.dir jlinkDir
}

distTar {
    compression = Compression.GZIP
    archiveExtension = "tgz"
}

distributions {
    main {
        distributionBaseName = project.ext.targetBaseName
        contents {

            into( '' ) {
                from {
                    configurations.distro.collect { zipTree( it ) }
                }
                if ( isArm64() )
                {
                    exclude { it.file.name.equals( 'jna-4.1.0.jar' ) }
                }
            }
            into( "system/$appLevel" ) {
                from configurations.app
            }
            into( '' ) {
                from( 'src/common' ) {
                    filesMatching( '**/*.sh' ) {
                        mode = 0755
                        filter( ReplaceTokens, tokens: [version: version] )
                    }
                    filesMatching( 'service/init.d/xp' ) {
                        mode = 0755
                    }
                    filesMatching( 'README.txt' ) {
                        expand version: version
                    }
                }

                if ( !withJava() )
                {
                    exclude 'bin/setenv.bat'
                    exclude 'bin/setenv.sh'
                }
            }

            if ( withJava() )
            {
                into( "jdk" ) {
                    from( jlinkDir ) {
                        filesMatching( 'bin/*' ) { mode = 0755 }
                    }
                }
            }
            else
            {
                into( '' ) {
                    from( 'src/generic' ) {
                        filesMatching( '**/*.sh' ) {
                            mode = 0755
                        }
                    }
                }
            }
        }
    }
}

[distZip, distTar, installDist]*.dependsOn jlink

publishing {
    publications {
        mavenJava( MavenPublication ) {
            artifactId project.ext.targetBaseName
            if ( withDistTar() )
            {
                artifact distTar
            }
            if ( withDistZip() )
            {
                artifact distZip
            }
        }
    }
}
