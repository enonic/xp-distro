enum TargetOS {

    WINDOWS_AMD64( 'windows-amd64', 'zip', '' ),
    LINUX_AMD64( 'linux-amd64', 'tar.gz', '' ),
    LINUX_ARM64( 'linux-aarch64', 'tar.gz', '' ),
    MAC_AMD64( 'darwin-amd64', 'tar.gz', 'Contents/Home' ),
    MAC_ARM64( 'darwin-aarch64', 'tar.gz', 'Contents/Home' ),
    GENERIC( null, null, null )

    String downloadPlatform

    String downloadExt

    String archiveJavaHome

    TargetOS( String downloadPlatform, String downloadExt, String archiveJavaHome )
    {
        this.downloadPlatform = downloadPlatform
        this.downloadExt = downloadExt
        this.archiveJavaHome = archiveJavaHome
    }

    String toJdkPackageName( String graalvmVersion )
    {
        return "graalvm-ce-java11-${downloadPlatform}-${graalvmVersion}"
    }

    String toJdkPackageFile( String graalvmVersion )
    {
        def jdkPackageName = toJdkPackageName( graalvmVersion )
        return "${jdkPackageName}.${downloadExt}"
    }

    String toDownloadString( String graalvmVersion )
    {
        def jdkPackageFile = toJdkPackageFile( graalvmVersion )

        return "https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${graalvmVersion}/${jdkPackageFile}"
    }

    static from( String targetPlatform )
    {
        if ( targetPlatform == 'windows' )
        {
            return WINDOWS_AMD64
        }
        else if ( targetPlatform == 'linux' )
        {
            return LINUX_AMD64
        }
        else if ( targetPlatform == 'linux-arm64' )
        {
            return LINUX_ARM64
        }
        else if ( targetPlatform == 'mac' )
        {
            return MAC_AMD64
        }
        else if ( targetPlatform == 'mac-arm64' )
        {
            return MAC_ARM64
        }
        else if ( targetPlatform == 'generic' )
        {
            return GENERIC
        }
        else
        {
            throw new GradleException( 'Build target platform not supported: ' + targetPlatform )
        }
    }
}

def getTargetOS()
{
    if ( ext.targetOS != null )
    {
        return ext.targetOS
    }
    ext.targetOS = TargetOS.from( getTargetOsName() )
    return ext.targetOS
}

def getJdkPackageFile()
{
    return isGenericBuild() ? null : getTargetOS().toJdkPackageFile( project.ext.graalvmVersion )
}

def getJdkPackageName()
{
    return isGenericBuild() ? null : getTargetOS().toJdkPackageName( project.ext.graalvmVersion )
}

def getJdkDownloadUrl()
{
    return isGenericBuild() ? null : getTargetOS().toDownloadString( project.ext.graalvmVersion )
}

def isGenericBuild()
{
    return getTargetOS() == TargetOS.GENERIC
}

def getArchiveJavaHome()
{
    return getTargetOS().archiveJavaHome
}

def isSdkBuild()
{
    return getTargetTypeName() == 'sdk'
}

def withDistTar()
{
    return ['linux', 'linux-arm64', 'mac', 'mac-arm64', 'generic'].contains( getTargetOsName() )
}

def withDistZip()
{
    // plan is to leave only 'windows' from XP 7.11
    return ['windows', 'linux', 'mac', 'generic'].contains( getTargetOsName() )
}

def withJava()
{
    return !isGenericBuild()
}

def withAddOptions()
{
    return getTargetOsName() != 'windows'
}

def getTargetOsName()
{
    return project.findProperty( 'os' ) ?: 'generic'
}

def getTargetTypeName()
{
    return project.findProperty( 'type' ) ?: 'server'
}

def getTargetBaseName()
{
    return 'enonic-xp-' + getTargetOsName() + ( isGenericBuild() ? '' : '-' + getTargetTypeName() )
}

ext {
    targetOS = null
    targetType = null
    jdkPackageFile = null
    graalvmVersion = "22.1.0"
    getJdkPackageFile = this.&getJdkPackageFile
    getJdkPackageName = this.&getJdkPackageName
    getJdkDownloadUrl = this.&getJdkDownloadUrl
    getArchiveJavaHome = this.&getArchiveJavaHome
    isGenericBuild = this.&isGenericBuild
    isSdkBuild = this.&isSdkBuild
    getTargetBaseName = this.&getTargetBaseName
    getTargetTypeName = this.&getTargetTypeName
    withDistTar = this.&withDistTar
    withDistZip = this.&withDistZip
    withJava = this.&withJava
    withAddOptions = this.&withAddOptions
}
