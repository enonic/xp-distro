enum TargetOS {

    WINDOWS_AMD64( 'windows-x64','windows-amd64', 'zip', '', '23.0.2' ),
    LINUX_AMD64( 'linux-x64','linux-amd64', 'tar.gz', '' , '23.0.2' ),
    LINUX_ARM64( 'linux-aarch64','linux-aarch64', 'tar.gz', '', '23.0.2' ),
    MAC_AMD64( 'macos-x64','darwin-amd64', 'tar.gz', 'Contents/Home', '23.0.2' ),
    MAC_ARM64( 'macos-aarch64','darwin-aarch64', 'tar.gz', 'Contents/Home', '23.0.2' ),
    GENERIC( null, null, null, null, null )

    String downloadPlatform

    String downloadExt

    String archiveJavaHome

    String graalvmVersion

    String vmDownloadPlatform

    String javaVersion = 'java17'

    TargetOS( String vmDownloadPlatform, String downloadPlatform, String downloadExt, String archiveJavaHome, String graalvmVersion )
    {
        this.vmDownloadPlatform = vmDownloadPlatform
        this.downloadPlatform = downloadPlatform
        this.downloadExt = downloadExt
        this.archiveJavaHome = archiveJavaHome
        this.graalvmVersion = graalvmVersion
    }

    String toJdkPackageName()
    {
        return "graalvm-community-jdk-17.0.9_${vmDownloadPlatform}_bin"
    }

    String toJdkPackageFile()
    {
        def jdkPackageName = toJdkPackageName()
        return "${jdkPackageName}.${downloadExt}"
    }

    String toGraalJsFile()
    {
        return "js-installable-svm-java17-${downloadPlatform}-${graalvmVersion}.jar"
    }

    String toIcu4jFile()
    {
        return "icu4j-installable-ce-java17-${downloadPlatform}-${graalvmVersion}.jar"
    }

    String toRegexFile()
    {
        return "regex-installable-ce-java17-${downloadPlatform}-${graalvmVersion}.jar"
    }

    String toDownloadString()
    {
        def jdkPackageFile = toJdkPackageFile()
        return "https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-17.0.9/${jdkPackageFile}"
    }

    String toGraalJsDownloadString()
    {
        def graalJsFile = toGraalJsFile()
        return "https://github.com/oracle/graaljs/releases/download/graal-${graalvmVersion}/${graalJsFile}"
    }

    String toIcu4jDownloadString()
    {
        def icu4jFile = toIcu4jFile()
        return "https://github.com/graalvm/graalvm-ce-builds/releases/download/graal-${graalvmVersion}/${icu4jFile}"
    }

    String toRegexDownloadString()
    {
        def regexFile = toRegexFile()
        return "https://github.com/graalvm/graalvm-ce-builds/releases/download/graal-${graalvmVersion}/${regexFile}"
    }

    static from( String targetPlatform )
    {
        if ( targetPlatform == 'windows' )
        {
            return WINDOWS_AMD64
        }
        else if ( targetPlatform == 'linux' )
        {
            return LINUX_AMD64
        }
        else if ( targetPlatform == 'linux-arm64' )
        {
            return LINUX_ARM64
        }
        else if ( targetPlatform == 'mac' )
        {
            return MAC_AMD64
        }
        else if ( targetPlatform == 'mac-arm64' )
        {
            return MAC_ARM64
        }
        else if ( targetPlatform == 'generic' )
        {
            return GENERIC
        }
        else
        {
            throw new GradleException( 'Build target platform not supported: ' + targetPlatform )
        }
    }
}

def getTargetOS()
{
    if ( ext.targetOS != null )
    {
        return ext.targetOS
    }
    ext.targetOS = TargetOS.from( getTargetOsName() )
    return ext.targetOS
}

def getJdkPackageFile()
{
    return isGenericBuild() ? null : getTargetOS().toJdkPackageFile()
}

def getGraalJsFile()
{
    return isGenericBuild() ? null : getTargetOS().toGraalJsFile()
}

def getIcu4jFile()
{
    return isGenericBuild() ? null : getTargetOS().toIcu4jFile()
}

def getRegexFile()
{
    return isGenericBuild() ? null : getTargetOS().toRegexFile()
}

def getJdkPackageName()
{
    return isGenericBuild() ? null : getTargetOS().toJdkPackageName()
}

def getJdkDownloadUrl()
{
    return isGenericBuild() ? null : getTargetOS().toDownloadString()
}

def getGraalJsDownloadUrl()
{
    return isGenericBuild() ? null : getTargetOS().toGraalJsDownloadString()
}

def getIcu4jDownloadUrl()
{
    return isGenericBuild() ? null : getTargetOS().toIcu4jDownloadString()
}

def getRegexDownloadUrl()
{
    return isGenericBuild() ? null : getTargetOS().toRegexDownloadString()
}

def isGenericBuild()
{
    return getTargetOS() == TargetOS.GENERIC
}

def getArchiveJavaHome()
{
    return getTargetOS().archiveJavaHome
}

def isSdkBuild()
{
    return getTargetTypeName() == 'sdk'
}

def withDistTar()
{
    return ['linux', 'linux-arm64', 'mac', 'mac-arm64', 'generic'].contains( getTargetOsName() )
}

def withDistZip()
{
    // plan is to leave only 'windows' from XP 7.11
    return ['windows', 'linux', 'mac', 'generic'].contains( getTargetOsName() )
}

def withJava()
{
    return !isGenericBuild()
}

def isArm64() {
    return [ 'linux-arm64', 'mac-arm64'].contains( getTargetOsName() )
}

def withAddOptions()
{
    return getTargetOsName() != 'windows'
}

def getTargetOsName()
{
    return project.findProperty( 'os' ) ?: 'generic'
}

def getTargetTypeName()
{
    return project.findProperty( 'type' ) ?: 'server'
}

def getTargetBaseName()
{
    return 'enonic-xp-' + getTargetOsName() + ( isGenericBuild() ? '' : '-' + getTargetTypeName() )
}

ext {
    targetOS = null
    targetType = null
    jdkPackageFile = null
    getJdkPackageFile = this.&getJdkPackageFile
    getGraalJsFile = this.&getGraalJsFile
    getIcu4jFile = this.&getIcu4jFile
    getRegexFile = this.&getRegexFile
    getJdkPackageName = this.&getJdkPackageName
    getJdkDownloadUrl = this.&getJdkDownloadUrl
    getGraalJsDownloadUrl = this.&getGraalJsDownloadUrl
    getIcu4jDownloadUrl = this.&getIcu4jDownloadUrl
    getRegexDownloadUrl = this.&getRegexDownloadUrl
    getArchiveJavaHome = this.&getArchiveJavaHome
    isGenericBuild = this.&isGenericBuild
    isSdkBuild = this.&isSdkBuild
    getTargetBaseName = this.&getTargetBaseName
    getTargetTypeName = this.&getTargetTypeName
    withDistTar = this.&withDistTar
    withDistZip = this.&withDistZip
    withJava = this.&withJava
    isArm64 = this.&isArm64
    withAddOptions = this.&withAddOptions
}
